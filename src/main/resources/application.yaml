spring:
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/postgres
    username: user
    password: password
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: none
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        jdbc:
          batch_size: 100
          batch_versioned_data: true
        order_updates: true

  liquibase:
    change-log: classpath:db/changelog/db.changelog-master.yaml

  data:
    redis:
      host: localhost
      port: 6379
      channel-topics:
        mentorship:
          request_accepted: mentorship_request_accepted_topic
        follower-event:
          name: follower_event_topic
        event-start:
          name: event_start_topic

server:
  port: 8080

project-service:
  host: localhost
  port: 8082

payment-service:
  host: localhost
  port: 9080
  base-path: /api
  url: http://${payment-service.host}:${payment-service.port}${payment-service.base-path}

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger
    tagsSorter: alpha
    operationsSorter: alpha

app:
  goal:
    max-active-per-user: 3
  promotion:
    user_promotion_views_decrement_cron: '*/10 * * * * *'
    event__promotion_views_decrement_cron: '*/10 * * * * *'
  premium:
    cron:
      premium_remove_scheduler: '0 0 0 ? * SUN *'
  retryable:
    payment_service:
      send_payment:
        max_attempts: 3
        delay: 100
        multiplier: 2
  async-config:
    promotion-task-service:
      core_pool_size: 10
      max_pool_size: 20
      queue_capacity: 1000
      thread_name_prefix: PromotionTaskService-Async-
    premium-service-sync:
      core_pool_size: 10
      max_pool_size: 20
      queue_capacity: 1000
      thread_name_prefix: PremiumService-Async-
  scheduler:
    event:
      start_event:
        cron: "0 * * * * *" # every minute
  user-redis-config:
    profile_view_event_topic: profileViewEvent
  quartz-config:
    profile-view-publish:
      trigger_interval_sec: 10

minio:
  endpoint: http://localhost:9000
  accessKey: user
  secretKey: password
  bucketName: corpbucket

redis:
  banner:
    topic: "user_ban"